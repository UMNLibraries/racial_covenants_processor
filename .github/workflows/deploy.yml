# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  TASK_EXECUTION_ROLE_ARN: arn:aws:iam::123456789012:role/ecsTaskExecutionRole
  TASK_FAMILY: racial-covenants-processor
  AWS_REGION: us-east-2                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: racial-covenants-processor           # set this to your Amazon ECR repository name
  ECS_SERVICE: production-service                 # set this to your Amazon ECS service name
  ECS_CLUSTER: production-cluster                 # set this to your Amazon ECS cluster name
#   ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: racial-covenants-processor           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition


permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} # value set automatically by the previous login step
        IMAGE_TAG: ${{ github.sha }} # tags the image with the git commit SHA
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI

    - name: Get current ECS task definition ARN
      id: get-task-def
      run: |
        TASK_ARN=$(aws ecs describe-services \
        --cluster ${{ env.ECS_CLUSTER }} \
        --services ${{ env.ECS_SERVICE }} \
        --query "services[0].taskDefinition" \
        --output text)
        echo "CURRENT_TASK_ARN=$TASK_ARN" >> $GITHUB_ENV

    - name: Download current ECS task definition
      run: |
        aws ecs describe-task-definition \
        --task-definition "$CURRENT_TASK_ARN" \
        --query "taskDefinition" \
        --output json > task-def.json

    - name: Fill in new image ID in task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-def.json 
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
